#!/usr/bin/env python3

import argparse
import re
from subprocess import run
import sys
import textwrap


def parse_tag(tag_name):
    """Parse the version from its tag name.

    Release tags are of the form "v0.6.3", and release candidates are of the form "v0.6.3-rc2".

    Raise a ValueError if the tag isn't in a recognised format.
    """
    pattern = re.compile(
        r"""
            v
            (?P<major>\d+)
            \.
            (?P<minor>\d+)
            \.
            (?P<patch>\d+)
            (
                -rc
                (?P<rc>\d+)
            )?
            $
        """,
        re.VERBOSE,
    )
    if tag_match := pattern.match(tag_name):
        if rc := tag_match.group("rc"):
            return RCVersion(
                major=int(tag_match.group("major")),
                minor=int(tag_match.group("minor")),
                patch=int(tag_match.group("patch")),
                rc=int(rc),
            )
        else:
            return ReleaseVersion(
                major=int(tag_match.group("major")),
                minor=int(tag_match.group("minor")),
                patch=int(tag_match.group("patch")),
            )
    else:
        raise ValueError(f"Unable to parse version tag '{tag_name}'")


class OperationError(Exception):
    """An exception indicating the user tried to do something impossible.

    There is an extra `advice` argument that can tell them what they should do instead,
    if there's a clear course of action.
    """

    def __init__(self, message, advice=None):
        super().__init__(message)
        self.advice = advice


class ReleaseVersion:
    """A version for a full (non-RC) release.

    Release tags are of the form `v0.0.0`, for example `v0.6.3`.
    """

    def __init__(self, major, minor, patch):
        self.major = major
        self.minor = minor
        self.patch = patch

    def __repr__(self):
        return f"ReleaseVersion({self.major}, {self.minor}, {self.patch})"

    def __str__(self):
        return f"v{self.major}.{self.minor}.{self.patch}"

    def next_rc(self, release_type):
        if release_type == "minor":
            return RCVersion(self.major, self.minor + 1, patch=0, rc=1)
        if release_type == "patch":
            return RCVersion(self.major, self.minor, self.patch + 1, rc=1)

        raise ValueError(f"Unrecognized release type {release_type}")

    def next_release(self, release_type):
        if release_type == "minor":
            return ReleaseVersion(self.major, self.minor + 1, patch=0)
        if release_type == "patch":
            return ReleaseVersion(self.major, self.minor, self.patch + 1)

        raise ValueError(f"Unrecognized release type {release_type}")


class RCVersion:
    """A version for an RC (release candidate).

    Release candidate tags are of the form `v0.0.0-rc0`, for example `v0.6.3-rc1`.

    Candidate numbers start at 1.
    """

    def __init__(self, major, minor, patch, rc):
        self.major = major
        self.minor = minor
        self.patch = patch
        self.rc = rc

    def __repr__(self):
        return f"RCVersion({self.major}, {self.minor}, {self.patch}, {self.rc})"

    def __str__(self):
        return f"v{self.major}.{self.minor}.{self.patch}-rc{self.rc}"

    def base(self):
        return ReleaseVersion(self.major, self.minor, self.patch)

    def bump(self):
        return RCVersion(self.major, self.minor, self.patch, self.rc + 1)


def update_tags():
    run(["git", "fetch", "--prune", "origin", "+refs/tags/*:refs/tags/*"], check=True)


def get_latest_tag():
    tag_cmd = run(
        ["git", "describe", "--abbrev=0", "--tags", "--match=v*.*.*"],
        check=True,
        capture_output=True,
        encoding="ascii",
    )
    return tag_cmd.stdout.strip()


def tag_version(tag):
    tag_name = str(tag)
    run(["git", "tag", "-a", tag_name, "-m", tag_name], check=True)


def push_tag(tag):
    tag_name = str(tag)
    run(["git", "push", "origin", "tag", tag_name], check=True)


def print_err(*args, **kwargs):
    """Print a debug message to stderr.

    Most of the program's output is going to go here, as there probably isn't much output we'd want
    to pipe into anything else.
    """
    print(file=sys.stderr, *args, **kwargs)


def run_self_test():
    """Run a somewhat janky self-test to make sure the version logic works as expected."""
    release = parse_tag("v0.1.2")
    rc = parse_tag("v0.1.2-rc3")

    assert str(next_tag(release, "minor", abandon=False, rc=True)) == "v0.2.0-rc1"
    assert str(next_tag(release, "minor", abandon=False, rc=False)) == "v0.2.0"
    assert str(next_tag(release, "patch", abandon=False, rc=True)) == "v0.1.3-rc1"
    assert str(next_tag(release, "patch", abandon=False, rc=False)) == "v0.1.3"

    assert str(next_tag(rc, "minor", abandon=True, rc=True)) == "v0.2.0-rc1"
    assert str(next_tag(rc, "minor", abandon=True, rc=False)) == "v0.2.0"
    assert str(next_tag(rc, "patch", abandon=True, rc=True)) == "v0.1.3-rc1"
    assert str(next_tag(rc, "patch", abandon=True, rc=False)) == "v0.1.3"

    assert str(next_tag(rc, "bump", abandon=False, rc=True)) == "v0.1.2-rc4"

    errors = [
        lambda: next_tag(release, "promote", abandon=False, rc=True),
        lambda: next_tag(rc, "minor", abandon=False, rc=True),
        lambda: next_tag(rc, "patch", abandon=False, rc=True),
        lambda: next_tag(release, "bump", abandon=False, rc=True),
    ]

    for error in errors:
        try:
            result = error()
            raise AssertionError(f"Expected an error, got {result}")
        except OperationError:
            pass


def _build_parser():
    """Create and return the parser for this command's options and arguments."""
    parser = argparse.ArgumentParser(
        description="Create and push a new release tag.",
        epilog=textwrap.dedent(
            """\
            Release types:

            (Major releases are not supported yet.)

              - minor:   includes new features, or changes existing ones
              - patch:   no new features, just bug fixes, security patches, and so forth
              - bump:    increment an existing release candidate
              - promote: tag a full release based on an existing release candidate
            """
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--skip-update",
        dest="update_tags",
        action="store_false",
        help="skip updating Git tags from the remote",
    )
    parser.add_argument(
        "--no-rc",
        dest="rc",
        action="store_false",
        help="go straight to a full release, rather than tagging an RC first",
    )
    parser.add_argument(
        "--abandon",
        action="store_true",
        help="skip over an existing RC tag, going to the next minor/patch version instead",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Don't actually push any tags anywhere",
    )

    parser.add_argument(
        "action",
        choices=["promote", "bump", "minor", "patch"],
        help="the type of release to tag",
    )

    return parser


PARSER = _build_parser()


def next_tag(original_tag, action, abandon, rc):
    tag = original_tag

    if action == "promote":
        try:
            return tag.base()
        except AttributeError:
            raise OperationError(f"Cannot promote non-RC tag {tag}")
    if action == "bump":
        try:
            return tag.bump()
        except AttributeError:
            raise OperationError(f"Cannot bump non-RC tag {tag}")
    if action in ["minor", "patch"]:
        if abandon:
            try:
                tag = tag.base()
            except AttributeError:
                raise OperationError(f"Cannot abandon non-RC tag {tag}")
        if rc:
            try:
                return tag.next_rc(action)
            except AttributeError:
                raise OperationError(
                    f"Cannot release on top of RC tag {tag}",
                    advice="To skip to the next version, use the `--abandon` option",
                )
        else:
            try:
                return tag.next_release(action)
            except AttributeError:
                raise OperationError(
                    f"Cannot release on top of RC tag {tag}",
                    advice="To skip to the next version, use the `--abandon` option",
                )

    # The argument parser should stop us getting here, but best to be safe
    raise OperationError(f"Invalid action '{action}'")


if __name__ == "__main__":
    if sys.argv[1:] == ["self-test"]:
        run_self_test()
        print("Self-test OK!")
        sys.exit(0)

    args = PARSER.parse_args()

    if args.update_tags:
        update_tags()

    tag_name = get_latest_tag()
    tag = original_tag = parse_tag(tag_name)
    print_err(f"Most recent tag: {original_tag}")

    try:
        tag = next_tag(original_tag, args.action, abandon=args.abandon, rc=args.rc)
    except OperationError as e:
        print_err(e)
        if e.advice:
            print_err(e.advice)
        sys.exit(1)

    if args.dry_run:
        print_err(f"Not tagging {tag}, as this is a dry run")
        sys.exit(0)
    else:
        tag_version(tag)
        print_err(f"Tagged {tag}")
        push_tag(tag)
        print_err(f"Pushed {tag} to Git remote")
