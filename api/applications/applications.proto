
syntax = "proto3";

package wego_server.v1;

option go_package = "github.com/weaveworks/weave-gitops/pkg/protos/applications";

import "google/api/annotations.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "WeGo Applications API",
      version: "0.1";
      description: "The WeGo Applications API handles operations for Weave GitOps Applications";
    };
    consumes: "application/json";
    produces: "application/json";
};

service Applications {
    /**
    * Authenticate generates jwt token using git provider name and git provider token arguments
    */
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post : "/v1/authenticate/{provider_name}"
            body: "*"
        };
    }

    /**
     * ListApplications returns the list of WeGo applications that the authenticated user has access to.
    */
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
        option (google.api.http) = {
            get : "/v1/applications"
        };
    }
    /**
    * GetApplication returns a given application
    */
    rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {
        option (google.api.http) = {
            get : "/v1/applications/{name}"
        };
    }
    /**
     * ListCommits returns the list of WeGo commits that the authenticated user has access to.
    */
    rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
        option (google.api.http) = {
            get : "/v1/applications/{name}/commits"
        };
    }
}

// This object represents a single condition for a Kubernetes object.
// It roughly matches the Kubernetes type defined here: https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#Condition
message Condition {
    string type      = 1;
    string status    = 2;
    string reason    = 3;
    string message   = 4;
    int32 timestamp = 5;
}

message Application {
    string   name                            = 1;  // The name of the application
    string   path                            = 2;  // The file path where the k8s yaml files for this application are stored.
    string   url                             = 3;  // The git repository URL for this application
    repeated Condition source_conditions     = 4;  // A list of conditions for the Source related to this Application
    repeated Condition deployment_conditions = 5;  // A list of conditions for the Kustomization or HelmRelease for this application
}

message AuthenticateRequest {
    string provider_name = 1;  // The name of the git provider
    string access_token  = 2;  // The token of the git provider
}

message AuthenticateResponse {
    string token = 1;  // The jwt token that was generated using git provider name and git provider token
}

message ListApplicationsRequest {
    string namespace = 1;  // The namespace to look for applications
}

message ListApplicationsResponse {
   repeated Application applications = 1; // A list of applications
}

message GetApplicationRequest {
    string name      = 1;  // The name of an application
    string namespace = 2;  // The kubernetes namespace of the application. Default is `wego-system`
}

message GetApplicationResponse {
    Application application = 1;
}

message Commit {
    string   commit_hash = 1;  // The hash of the commit
    string   date        = 2;  // The date the commit was made.
    string   author      = 3;  // The author of the commit
    string   message     = 4;  // The commit message
}

message ListCommitsRequest {
    string name               = 1;  // The application name
    string namespace          = 2;  // The namespace the application is in
    int32 page_size           = 3;
    // Optional. A pagination token returned from a previous call
    // that indicates where this listing should continue from.
    optional int32 page_token = 4;
}

message ListCommitsResponse {
    repeated Commit commits = 1; // A list of commits
    // A pagination token returned from a previous call
    // that indicates from where listing should continue.
    int32 next_page_token = 2;
}
