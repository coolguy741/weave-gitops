// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"context"
	"sync"

	"github.com/fluxcd/source-controller/api/v1beta1"
	"github.com/weaveworks/weave-gitops/pkg/api/profiles"
	"github.com/weaveworks/weave-gitops/pkg/helm"
	"github.com/weaveworks/weave-gitops/pkg/server"
)

type FakeHelmRepoManager struct {
	GetChartsStub        func(context.Context, *v1beta1.HelmRepository, helm.ChartPredicate) ([]*profiles.Profile, error)
	getChartsMutex       sync.RWMutex
	getChartsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 helm.ChartPredicate
	}
	getChartsReturns struct {
		result1 []*profiles.Profile
		result2 error
	}
	getChartsReturnsOnCall map[int]struct {
		result1 []*profiles.Profile
		result2 error
	}
	GetValuesFileStub        func(context.Context, *v1beta1.HelmRepository, *helm.ChartReference, string) ([]byte, error)
	getValuesFileMutex       sync.RWMutex
	getValuesFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 *helm.ChartReference
		arg4 string
	}
	getValuesFileReturns struct {
		result1 []byte
		result2 error
	}
	getValuesFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelmRepoManager) GetCharts(arg1 context.Context, arg2 *v1beta1.HelmRepository, arg3 helm.ChartPredicate) ([]*profiles.Profile, error) {
	fake.getChartsMutex.Lock()
	ret, specificReturn := fake.getChartsReturnsOnCall[len(fake.getChartsArgsForCall)]
	fake.getChartsArgsForCall = append(fake.getChartsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 helm.ChartPredicate
	}{arg1, arg2, arg3})
	stub := fake.GetChartsStub
	fakeReturns := fake.getChartsReturns
	fake.recordInvocation("GetCharts", []interface{}{arg1, arg2, arg3})
	fake.getChartsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHelmRepoManager) GetChartsCallCount() int {
	fake.getChartsMutex.RLock()
	defer fake.getChartsMutex.RUnlock()
	return len(fake.getChartsArgsForCall)
}

func (fake *FakeHelmRepoManager) GetChartsCalls(stub func(context.Context, *v1beta1.HelmRepository, helm.ChartPredicate) ([]*profiles.Profile, error)) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = stub
}

func (fake *FakeHelmRepoManager) GetChartsArgsForCall(i int) (context.Context, *v1beta1.HelmRepository, helm.ChartPredicate) {
	fake.getChartsMutex.RLock()
	defer fake.getChartsMutex.RUnlock()
	argsForCall := fake.getChartsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHelmRepoManager) GetChartsReturns(result1 []*profiles.Profile, result2 error) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = nil
	fake.getChartsReturns = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeHelmRepoManager) GetChartsReturnsOnCall(i int, result1 []*profiles.Profile, result2 error) {
	fake.getChartsMutex.Lock()
	defer fake.getChartsMutex.Unlock()
	fake.GetChartsStub = nil
	if fake.getChartsReturnsOnCall == nil {
		fake.getChartsReturnsOnCall = make(map[int]struct {
			result1 []*profiles.Profile
			result2 error
		})
	}
	fake.getChartsReturnsOnCall[i] = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeHelmRepoManager) GetValuesFile(arg1 context.Context, arg2 *v1beta1.HelmRepository, arg3 *helm.ChartReference, arg4 string) ([]byte, error) {
	fake.getValuesFileMutex.Lock()
	ret, specificReturn := fake.getValuesFileReturnsOnCall[len(fake.getValuesFileArgsForCall)]
	fake.getValuesFileArgsForCall = append(fake.getValuesFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.HelmRepository
		arg3 *helm.ChartReference
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetValuesFileStub
	fakeReturns := fake.getValuesFileReturns
	fake.recordInvocation("GetValuesFile", []interface{}{arg1, arg2, arg3, arg4})
	fake.getValuesFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHelmRepoManager) GetValuesFileCallCount() int {
	fake.getValuesFileMutex.RLock()
	defer fake.getValuesFileMutex.RUnlock()
	return len(fake.getValuesFileArgsForCall)
}

func (fake *FakeHelmRepoManager) GetValuesFileCalls(stub func(context.Context, *v1beta1.HelmRepository, *helm.ChartReference, string) ([]byte, error)) {
	fake.getValuesFileMutex.Lock()
	defer fake.getValuesFileMutex.Unlock()
	fake.GetValuesFileStub = stub
}

func (fake *FakeHelmRepoManager) GetValuesFileArgsForCall(i int) (context.Context, *v1beta1.HelmRepository, *helm.ChartReference, string) {
	fake.getValuesFileMutex.RLock()
	defer fake.getValuesFileMutex.RUnlock()
	argsForCall := fake.getValuesFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHelmRepoManager) GetValuesFileReturns(result1 []byte, result2 error) {
	fake.getValuesFileMutex.Lock()
	defer fake.getValuesFileMutex.Unlock()
	fake.GetValuesFileStub = nil
	fake.getValuesFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHelmRepoManager) GetValuesFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getValuesFileMutex.Lock()
	defer fake.getValuesFileMutex.Unlock()
	fake.GetValuesFileStub = nil
	if fake.getValuesFileReturnsOnCall == nil {
		fake.getValuesFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getValuesFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHelmRepoManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChartsMutex.RLock()
	defer fake.getChartsMutex.RUnlock()
	fake.getValuesFileMutex.RLock()
	defer fake.getValuesFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHelmRepoManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.HelmRepoManager = new(FakeHelmRepoManager)
