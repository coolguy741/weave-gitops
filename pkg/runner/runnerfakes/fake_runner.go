// Code generated by counterfeiter. DO NOT EDIT.
package runnerfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/runner"
)

type FakeRunner struct {
	RunStub        func(string, ...string) ([]byte, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	runReturns struct {
		result1 []byte
		result2 error
	}
	runReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	RunWithStdinStub        func(string, []string, []byte) ([]byte, error)
	runWithStdinMutex       sync.RWMutex
	runWithStdinArgsForCall []struct {
		arg1 string
		arg2 []string
		arg3 []byte
	}
	runWithStdinReturns struct {
		result1 []byte
		result2 error
	}
	runWithStdinReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunner) Run(arg1 string, arg2 ...string) ([]byte, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeRunner) RunCalls(stub func(string, ...string) ([]byte, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeRunner) RunArgsForCall(i int) (string, []string) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRunner) RunReturns(result1 []byte, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) RunReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) RunWithStdin(arg1 string, arg2 []string, arg3 []byte) ([]byte, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.runWithStdinMutex.Lock()
	ret, specificReturn := fake.runWithStdinReturnsOnCall[len(fake.runWithStdinArgsForCall)]
	fake.runWithStdinArgsForCall = append(fake.runWithStdinArgsForCall, struct {
		arg1 string
		arg2 []string
		arg3 []byte
	}{arg1, arg2Copy, arg3Copy})
	stub := fake.RunWithStdinStub
	fakeReturns := fake.runWithStdinReturns
	fake.recordInvocation("RunWithStdin", []interface{}{arg1, arg2Copy, arg3Copy})
	fake.runWithStdinMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRunner) RunWithStdinCallCount() int {
	fake.runWithStdinMutex.RLock()
	defer fake.runWithStdinMutex.RUnlock()
	return len(fake.runWithStdinArgsForCall)
}

func (fake *FakeRunner) RunWithStdinCalls(stub func(string, []string, []byte) ([]byte, error)) {
	fake.runWithStdinMutex.Lock()
	defer fake.runWithStdinMutex.Unlock()
	fake.RunWithStdinStub = stub
}

func (fake *FakeRunner) RunWithStdinArgsForCall(i int) (string, []string, []byte) {
	fake.runWithStdinMutex.RLock()
	defer fake.runWithStdinMutex.RUnlock()
	argsForCall := fake.runWithStdinArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRunner) RunWithStdinReturns(result1 []byte, result2 error) {
	fake.runWithStdinMutex.Lock()
	defer fake.runWithStdinMutex.Unlock()
	fake.RunWithStdinStub = nil
	fake.runWithStdinReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) RunWithStdinReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.runWithStdinMutex.Lock()
	defer fake.runWithStdinMutex.Unlock()
	fake.RunWithStdinStub = nil
	if fake.runWithStdinReturnsOnCall == nil {
		fake.runWithStdinReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.runWithStdinReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runWithStdinMutex.RLock()
	defer fake.runWithStdinMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runner.Runner = new(FakeRunner)
