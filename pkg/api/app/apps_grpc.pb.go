// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppsClient is the client API for Apps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsClient interface {
	//
	// AddApplication adds an Application to a cluster via GitOps.
	AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error)
	//
	// GetApplication returns a given application
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	//
	// ListApplications returns the list of WeGo applications that the authenticated user has access to.
	ListApps(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error)
	//
	// RemoveApplication removes an Application from a cluster via GitOps.
	RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error)
	//
	// AddKustomization adds a Kustomization to a cluster via GitOps.
	AddKustomization(ctx context.Context, in *AddKustomizationReq, opts ...grpc.CallOption) (*AddKustomizationRes, error)
	//
	// ListKustomization lists Kustomizations from a cluster via GitOps.
	ListKustomizations(ctx context.Context, in *ListKustomizationsReq, opts ...grpc.CallOption) (*ListKustomizationsRes, error)
	//
	// RemoveKustomization removes a Kustomization from a cluster via GitOps.
	RemoveKustomizations(ctx context.Context, in *RemoveKustomizationReq, opts ...grpc.CallOption) (*RemoveKustomizationRes, error)
	//
	// AddGitRepository adds a git repository source to a cluster.
	AddGitRepository(ctx context.Context, in *AddGitRepositoryReq, opts ...grpc.CallOption) (*AddGitRepositoryRes, error)
	//
	// ListGitRepository lists git repositories from a cluster.
	ListGitRepositories(ctx context.Context, in *ListGitRepositoryReq, opts ...grpc.CallOption) (*ListGitRepositoryRes, error)
	//
	// AddHelmRepository adds a helm repository source to a cluster.
	AddHelmRepository(ctx context.Context, in *AddHelmRepositoryReq, opts ...grpc.CallOption) (*AddHelmRepositoryRes, error)
	//
	// ListHelmRepository lists helm repositories from a cluster.
	ListHelmRepositories(ctx context.Context, in *ListHelmRepositoryReq, opts ...grpc.CallOption) (*ListHelmRepositoryRes, error)
}

type appsClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsClient(cc grpc.ClientConnInterface) AppsClient {
	return &appsClient{cc}
}

func (c *appsClient) AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error) {
	out := new(AddAppResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/AddApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ListApps(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error) {
	out := new(ListAppResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error) {
	out := new(RemoveAppResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/RemoveApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) AddKustomization(ctx context.Context, in *AddKustomizationReq, opts ...grpc.CallOption) (*AddKustomizationRes, error) {
	out := new(AddKustomizationRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/AddKustomization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ListKustomizations(ctx context.Context, in *ListKustomizationsReq, opts ...grpc.CallOption) (*ListKustomizationsRes, error) {
	out := new(ListKustomizationsRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/ListKustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) RemoveKustomizations(ctx context.Context, in *RemoveKustomizationReq, opts ...grpc.CallOption) (*RemoveKustomizationRes, error) {
	out := new(RemoveKustomizationRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/RemoveKustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) AddGitRepository(ctx context.Context, in *AddGitRepositoryReq, opts ...grpc.CallOption) (*AddGitRepositoryRes, error) {
	out := new(AddGitRepositoryRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/AddGitRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ListGitRepositories(ctx context.Context, in *ListGitRepositoryReq, opts ...grpc.CallOption) (*ListGitRepositoryRes, error) {
	out := new(ListGitRepositoryRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/ListGitRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) AddHelmRepository(ctx context.Context, in *AddHelmRepositoryReq, opts ...grpc.CallOption) (*AddHelmRepositoryRes, error) {
	out := new(AddHelmRepositoryRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/AddHelmRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ListHelmRepositories(ctx context.Context, in *ListHelmRepositoryReq, opts ...grpc.CallOption) (*ListHelmRepositoryRes, error) {
	out := new(ListHelmRepositoryRes)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.Apps/ListHelmRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServer is the server API for Apps service.
// All implementations must embed UnimplementedAppsServer
// for forward compatibility
type AppsServer interface {
	//
	// AddApplication adds an Application to a cluster via GitOps.
	AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error)
	//
	// GetApplication returns a given application
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	//
	// ListApplications returns the list of WeGo applications that the authenticated user has access to.
	ListApps(context.Context, *ListAppRequest) (*ListAppResponse, error)
	//
	// RemoveApplication removes an Application from a cluster via GitOps.
	RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error)
	//
	// AddKustomization adds a Kustomization to a cluster via GitOps.
	AddKustomization(context.Context, *AddKustomizationReq) (*AddKustomizationRes, error)
	//
	// ListKustomization lists Kustomizations from a cluster via GitOps.
	ListKustomizations(context.Context, *ListKustomizationsReq) (*ListKustomizationsRes, error)
	//
	// RemoveKustomization removes a Kustomization from a cluster via GitOps.
	RemoveKustomizations(context.Context, *RemoveKustomizationReq) (*RemoveKustomizationRes, error)
	//
	// AddGitRepository adds a git repository source to a cluster.
	AddGitRepository(context.Context, *AddGitRepositoryReq) (*AddGitRepositoryRes, error)
	//
	// ListGitRepository lists git repositories from a cluster.
	ListGitRepositories(context.Context, *ListGitRepositoryReq) (*ListGitRepositoryRes, error)
	//
	// AddHelmRepository adds a helm repository source to a cluster.
	AddHelmRepository(context.Context, *AddHelmRepositoryReq) (*AddHelmRepositoryRes, error)
	//
	// ListHelmRepository lists helm repositories from a cluster.
	ListHelmRepositories(context.Context, *ListHelmRepositoryReq) (*ListHelmRepositoryRes, error)
	mustEmbedUnimplementedAppsServer()
}

// UnimplementedAppsServer must be embedded to have forward compatible implementations.
type UnimplementedAppsServer struct {
}

func (UnimplementedAppsServer) AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApp not implemented")
}
func (UnimplementedAppsServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAppsServer) ListApps(context.Context, *ListAppRequest) (*ListAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedAppsServer) RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApp not implemented")
}
func (UnimplementedAppsServer) AddKustomization(context.Context, *AddKustomizationReq) (*AddKustomizationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKustomization not implemented")
}
func (UnimplementedAppsServer) ListKustomizations(context.Context, *ListKustomizationsReq) (*ListKustomizationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKustomizations not implemented")
}
func (UnimplementedAppsServer) RemoveKustomizations(context.Context, *RemoveKustomizationReq) (*RemoveKustomizationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKustomizations not implemented")
}
func (UnimplementedAppsServer) AddGitRepository(context.Context, *AddGitRepositoryReq) (*AddGitRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitRepository not implemented")
}
func (UnimplementedAppsServer) ListGitRepositories(context.Context, *ListGitRepositoryReq) (*ListGitRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitRepositories not implemented")
}
func (UnimplementedAppsServer) AddHelmRepository(context.Context, *AddHelmRepositoryReq) (*AddHelmRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHelmRepository not implemented")
}
func (UnimplementedAppsServer) ListHelmRepositories(context.Context, *ListHelmRepositoryReq) (*ListHelmRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelmRepositories not implemented")
}
func (UnimplementedAppsServer) mustEmbedUnimplementedAppsServer() {}

// UnsafeAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServer will
// result in compilation errors.
type UnsafeAppsServer interface {
	mustEmbedUnimplementedAppsServer()
}

func RegisterAppsServer(s grpc.ServiceRegistrar, srv AppsServer) {
	s.RegisterService(&Apps_ServiceDesc, srv)
}

func _Apps_AddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).AddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/AddApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).AddApp(ctx, req.(*AddAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ListApps(ctx, req.(*ListAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/RemoveApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).RemoveApp(ctx, req.(*RemoveAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_AddKustomization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKustomizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).AddKustomization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/AddKustomization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).AddKustomization(ctx, req.(*AddKustomizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ListKustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKustomizationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ListKustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/ListKustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ListKustomizations(ctx, req.(*ListKustomizationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_RemoveKustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKustomizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).RemoveKustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/RemoveKustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).RemoveKustomizations(ctx, req.(*RemoveKustomizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_AddGitRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).AddGitRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/AddGitRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).AddGitRepository(ctx, req.(*AddGitRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ListGitRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ListGitRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/ListGitRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ListGitRepositories(ctx, req.(*ListGitRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_AddHelmRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHelmRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).AddHelmRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/AddHelmRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).AddHelmRepository(ctx, req.(*AddHelmRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ListHelmRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelmRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ListHelmRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.Apps/ListHelmRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ListHelmRepositories(ctx, req.(*ListHelmRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Apps_ServiceDesc is the grpc.ServiceDesc for Apps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitops_server.v1.Apps",
	HandlerType: (*AppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddApp",
			Handler:    _Apps_AddApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Apps_GetApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _Apps_ListApps_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _Apps_RemoveApp_Handler,
		},
		{
			MethodName: "AddKustomization",
			Handler:    _Apps_AddKustomization_Handler,
		},
		{
			MethodName: "ListKustomizations",
			Handler:    _Apps_ListKustomizations_Handler,
		},
		{
			MethodName: "RemoveKustomizations",
			Handler:    _Apps_RemoveKustomizations_Handler,
		},
		{
			MethodName: "AddGitRepository",
			Handler:    _Apps_AddGitRepository_Handler,
		},
		{
			MethodName: "ListGitRepositories",
			Handler:    _Apps_ListGitRepositories_Handler,
		},
		{
			MethodName: "AddHelmRepository",
			Handler:    _Apps_AddHelmRepository_Handler,
		},
		{
			MethodName: "ListHelmRepositories",
			Handler:    _Apps_ListHelmRepositories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/apps.proto",
}
